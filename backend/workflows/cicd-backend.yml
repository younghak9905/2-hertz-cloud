name: CI/CD Backend (SSH)

on:
  pull_request:
    types: [closed] # PRÏù¥ Îã´ÌòîÏùÑ Îïå (Î≥ëÌï© Ìè¨Ìï®)
    branches:
      # - main # main Î∏åÎûúÏπòÎ°ú Merge Ïãú -> PROD ÌôòÍ≤ΩÏóê Î∞∞Ìè¨
      - develop # develop Î∏åÎûúÏπòÎ°ú Merge Ïãú -> DEV ÌôòÍ≤ΩÏóê Î∞∞Ìè¨
    paths-ignore:
      - .github/workflows/** # ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌååÏùº Î≥ÄÍ≤ΩÏùÄ Î∞∞Ìè¨ Ìä∏Î¶¨Í±∞ÌïòÏßÄ ÏïäÏùå
      - Dockerfile # Dockerfile Î≥ÄÍ≤ΩÏùÄ Î∞∞Ìè¨ Ìä∏Î¶¨Í±∞ÌïòÏßÄ ÏïäÏùå

  # ‚úÖ ÏàòÎèô `Ïã§Ìñâ Ìä∏Î¶¨Í±∞ Ï∂îÍ∞Ä
  workflow_dispatch:
    inputs:
      env:
        description: "Î∞∞Ìè¨ ÌôòÍ≤Ω ÏÑ†ÌÉù"
        required: true
        default: "DEV"
        type: choice
        options:
          - DEV
          # - PROD

jobs:
  backend-cd:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    steps:
      # # ‚úÖ act ÌÖåÏä§Ìä∏Ïö© ÌïÑÏöî Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò (Î™ÖÎ†πÏñ¥: act workflow_dispatch -W .github/workflows/cicd-backend.yml -P ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest)
      # - name: Install required tools
      #   run: |
      #     apt-get update && apt-get install -y awscli curl jq

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set environment variables from SSM
        id: ssm
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            # Î©ÄÌã∞ÎùºÏù∏ ÎßàÏä§ÌÇπ Ï≤òÎ¶¨
            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }

          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "‚ö†Ô∏è Ìï¥Îãπ Ïä§ÌÅ¨Î¶ΩÌä∏ÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî PRODÎäî SSH ÏÑúÎ≤ÑÎ°ú Îçî Ïù¥ÏÉÅ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
            exit 1
            echo "ENV=PROD" >> $GITHUB_ENV
            load_param "/global/gcp/PROD_GCP_HOST" HOST
            load_param "/global/gcp/PROD_GCP_INSTANCE" INSTANCE
            load_param "/global/gcp/PROD_GCP_PROJECT_ID" PROJECT_ID
            load_secret_to_file "/global/gcp/PROD_GCP_SA_KEY" gcp-sa-key.json
          else
            echo "ENV=DEV" >> $GITHUB_ENV
            load_param "/global/gcp/DEV_GCP_HOST" HOST
            load_param "/global/gcp/DEV_GCP_INSTANCE" INSTANCE
            load_param "/global/gcp/DEV_GCP_PROJECT_ID" PROJECT_ID
            load_secret_to_file "/global/gcp/DEV_GCP_SA_KEY" gcp-sa-key.json
          fi

          load_param "/global/gcp/GCP_ZONE" ZONE

          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


          load_param "/global/gcp/SSH_USERNAME" SSH_USERNAME
          load_secret_to_file "/global/gcp/SSH_PRIVATE_KEY" id_rsa
          chmod 600 id_rsa
          echo "SSH_KEY_PATH=id_rsa" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: Read GCP SA key JSON
        id: read_sa_key
        run: |
          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ env.SA_KEY }}"

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        run: |
          echo "‚ö° Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "üîé ÌòÑÏû¨ ÏÉÅÌÉú: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "üîÑ 'resume' Î™ÖÎ†π Ïã§Ìñâ"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "üîÑ 'start' Î™ÖÎ†π Ïã§Ìñâ"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
            sleep 30
          else
            echo "‚úÖ Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ë"
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_KEY_PATH }}
          script: |
            cd /home/deploy
            chmod +x be_deploy.sh
            ./be_deploy.sh

      - name: Wait for Spring Boot to start
        run: |
          echo "üïí Spring Boot ÏÑúÎ≤Ñ Í∏∞Îèô ÎåÄÍ∏∞ Ï§ë..."
          sleep 15

      - name: Health check with retries
        run: |
          echo "üîç Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏãúÏûë"
          if [[ "${{ env.BRANCH }}" == "main" ]]; then
            CHECK_URL="https://hertz-tuning.com/api/ping"
          else
            CHECK_URL="http://${{ env.HOST }}:8080/api/ping"
          fi

          for i in {1..15}; do
            echo "‚è±Ô∏è ÏãúÎèÑ $i: $CHECK_URL"
            if curl -sf "$CHECK_URL"; then
              echo "‚úÖ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏÑ±Í≥µ"
              exit 0
            else
              echo "::error::Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏãúÎèÑ $i Ïã§Ìå®"
              sleep 30
            fi
          done

          echo "::error::‚ùå 15Ìöå Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®"
          exit 1

      - name: Send failure notification
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"‚ùå **[${{ env.ENV }} ÌôòÍ≤Ω]** BE Î∞∞Ìè¨ Ïã§Ìå®(ÏûêÎèô)\\n> Branch: \`${{ env.BRANCH }}\`\\n> Commit: ${{ env.COMMIT_HASH }}\\n> [ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î°úÍ∑∏ Î≥¥Í∏∞]($WORKFLOW_URL)\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"üöÄ **[${{ env.ENV }} ÌôòÍ≤Ω]** BE Î∞∞Ìè¨ ÏôÑÎ£å(ÏûêÎèô)\\n> Branch: \`${{ env.BRANCH }}\`\\n> Commit: ${{ env.COMMIT_HASH }}\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

  backend-rollback:
    needs: backend-cd
    if: always() && needs.backend-cd.result != 'success'
    runs-on: ubuntu-latest
    steps:
      # # ‚úÖ act ÌÖåÏä§Ìä∏Ïö© ÌïÑÏöî Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò
      # - name: Install required tools
      #   run: |
      #     apt-get update && apt-get install -y awscli curl jq

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Set environment variables from SSM
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            # Î©ÄÌã∞ÎùºÏù∏ ÎßàÏä§ÌÇπ Ï≤òÎ¶¨
            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }

          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=PROD" >> $GITHUB_ENV
            load_param "/global/gcp/PROD_GCP_HOST" HOST
            load_secret_to_file "/global/gcp/PROD_GCP_SA_KEY" gcp-sa-key.json
          else
            echo "ENV=DEV" >> $GITHUB_ENV
            load_param "/global/gcp/DEV_GCP_HOST" HOST
            load_secret_to_file "/global/gcp/DEV_GCP_SA_KEY" gcp-sa-key.json
          fi

          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          load_param "/global/gcp/SSH_USERNAME" SSH_USERNAME
          load_secret_to_file "/global/gcp/SSH_PRIVATE_KEY" id_rsa
          chmod 600 id_rsa
          echo "SSH_KEY_PATH=id_rsa" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: Read GCP SA key JSON
        id: read_sa_key
        run: |
          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ env.SA_KEY }}"
      - name: Send rollback start notification
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"üîÑ **[${{ env.ENV }} ÌôòÍ≤Ω]** BE Î°§Î∞±ÏùÑ Ïã§ÌñâÌï©ÎãàÎã§(ÏûêÎèô)\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: SSH into server and rollback
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_KEY_PATH }}
          script: |
            cd /home/deploy
            ./be_deploy.sh --rollback || exit 1

      - name: Wait for Spring Boot to start
        run: |
          echo "üïí Spring Boot ÏÑúÎ≤Ñ Í∏∞Îèô ÎåÄÍ∏∞ Ï§ë..."
          sleep 15

      - name: Health check with retries
        run: |
          echo "(Rollback) üîç Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏãúÏûë: ÏµúÎåÄ 5Ìöå ÏãúÎèÑÌï©ÎãàÎã§."

          if [[ "$ENV" == "PROD" ]]; then
            CHECK_URL="https://hertz-tuning.com/api/ping"
          else
            CHECK_URL="http://${HOST}:8080/api/ping"
          fi

          for i in {1..15}; do
            echo "‚è±Ô∏è ÏãúÎèÑ $i: $CHECK_URL"
            if curl -sf "$CHECK_URL"; then
              echo "(Rollback) ‚úÖ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏÑ±Í≥µ üéâ"
              exit 0
            else
              echo "::error::Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏãúÎèÑ $i Ïã§Ìå®"
              sleep 30
            fi
          done

          echo "::error::(Rollback) ‚ùå 5Ìöå Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå® - ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅ Í∏∞ÎèôÎêòÏßÄ ÏïäÏùå"
          exit 1

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"‚úÖ **[${{ env.ENV }} ÌôòÍ≤Ω]** BE Î°§Î∞± ÏôÑÎ£å(ÏûêÎèô)\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"‚ùå **[${{ env.ENV }} ÌôòÍ≤Ω]** BE Î°§Î∞± Ïã§Ìå®(ÏûêÎèô)\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}
