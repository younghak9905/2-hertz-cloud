name: CI/CD Backend (DOCKER)

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - develop
    paths-ignore:
      - .github/workflows/**


  workflow_dispatch:
    inputs:
      redirect_url:
        description: "(STAGE 일 때만 선택!) Redirect URL"
        required: true
        default: "stage"
        type: choice
        options:
          - local
          - dev
          - stage

jobs:
  backend-ci:
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    outputs:
      BRANCH: ${{ steps.generate-tags.outputs.BRANCH }}
      SHORT_SHA: ${{ steps.generate-tags.outputs.SHORT_SHA }}
      FULL_IMAGE: ${{ steps.generate-tags.outputs.FULL_IMAGE }}
    runs-on: ubuntu-latest
    steps:
      # ✅ act 테스트용 명령어: act workflow_dispatch -W .github/workflows/docker-cicd-backend.yml -P ubuntu-latest=docker.io/ddongu/act-runner-terraform:latest
      # 1. 소스 코드 Checkout
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 2. AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4. 태그 정보 생성
      - name: Generate image tags
        id: generate-tags
        run: |

          if [ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]; then
            BRANCH="${{ github.ref_name }}"
              else
            BRANCH="${{ github.ref_name }}"
          fi

          SANITIZED_BRANCH="${BRANCH//\//-}"
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
          BRANCH="$SANITIZED_BRANCH"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE_TAG="${BRANCH}-${SHORT_SHA}"

          if [ "$BRANCH" = "main" ]; then
            ENV_TAG="prod-latest"
            echo "ENV=PROD" >> $GITHUB_ENV
          else
            ENV_TAG="develop-latest"
            echo "ENV=STAGE" >> $GITHUB_ENV
          fi

          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ENV_TAG=$ENV_TAG" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT

          echo "::add-mask::${{ env.IMAGE_TAG }}"
          echo "::add-mask::${{ env.ENV_TAG }}"

      - name: Fetch Environment Variables from SSM
        id: fetch-ssm-params
        run: |
          ENV_PATH=""
          if [ "${{ env.BRANCH }}" = "main" ]; then
            ENV_PATH="/global/springboot/prod/"
          else
            ENV_PATH="/global/springboot/dev/"
          fi

          echo "🛠️ SSM에서 환경 변수 가져오는 중: $ENV_PATH"

          # SSM 파라미터 가져오기 및 파싱
          # `jq`는 JSON 파싱을 위해 필요합니다. `ubuntu-latest`에는 기본 설치되어 있습니다.
          # 각 파라미터의 값을 명시적으로 마스킹 처리하고,
          # Spring Boot 환경 변수 명명 규칙에 맞게 키를 변환하여 GITHUB_ENV에 추가합니다.
          aws ssm get-parameters-by-path \
            --path "$ENV_PATH" \
            --recursive \
            --with-decryption \
            --query 'Parameters[*].{Name: Name, Value: Value}' | \
            jq -r '.[] | (.Name | split("/") | last | gsub("[.-]";"_") | ascii_upcase) + "=" + .Value' > .env_temp

          echo "📋 다음 환경 변수들을 테스트에 적용합니다:"
          # .env_temp 파일의 각 라인을 읽어 환경 변수로 로드하고 마스킹 처리
          while IFS='=' read -r key value; do
            if [[ -n "$key" ]]; then
              echo "::add-mask::$value" # 민감한 값은 로그에 마스킹 처리
              echo "$key=$value" >> $GITHUB_ENV # 환경 변수로 설정
              echo "$key=(masked)" # 로그에 설정된 변수 이름만 표시
            fi
          done < .env_temp
          rm .env_temp # 임시 파일 삭제
        working-directory: hertz-be/ # 프로젝트의 루트 디렉토리가 아닌 경우 설정

      - name: Run All Tests (Unit and Integration)
        run: |
          echo "🛠️ 디버깅: 현재 환경 변수 확인..."
          # WARNING: 이 명령은 민감한 정보를 포함할 수 있습니다.
          # 테스트 완료 후에는 반드시 이 라인을 삭제하세요.
          env | grep -E 'SPRING_|DB_|REDIS_|URL_|SECRET_|KEY_' || true
          echo "🧪 모든 테스트 실행 중 (단위 및 통합, SSM 환경 변수 사용)..."
          # Testcontainers를 사용하는 통합 테스트도 이 스텝에서 실행됩니다.
          # SSM에서 가져온 환경 변수는 자동으로 이 스텝에 적용됩니다.
          ./gradlew test --info # --info 옵션으로 더 자세한 로그 확인 가능
        working-directory: hertz-be/ # 프로젝트의 루트 디렉토리가 아닌 경우 설정
        continue-on-error: true # 테스트 실패 시에도 다음 스텝으로 진행하도록 허용

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ github.sha }}
          path: hertz-be/build/reports/tests/test/index.html # 실제 보고서 경로로 변경 필요
          retention-days: 7 # 보고서 보관 기간 (선택 사항)

      # 5. Docker 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPOSITORY=tuning-springboot

          echo "🏗️ Docker 이미지 빌드 시작..."

          docker build \
            --platform linux/amd64 \
            --cache-from=type=registry,ref=$ECR_REGISTRY/$REPOSITORY:$ENV_TAG \
            --cache-to=type=inline \
            -f hertz-be/Dockerfile \
            -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG \
            hertz-be/
          docker tag $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}

          echo "📤 Docker 이미지 푸시 중..."
          docker push $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}

          echo "FULL_IMAGE=$ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_OUTPUT
          echo "::add-mask::${{ env.FULL_IMAGE }}"

      # 6. 성공 알림
      - name: Notify Discord on Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"✅ **[${{ env.ENV }} 환경]** Docker BE **CI** 성공\\n> Branch: \`${{ env.BRANCH }}\`)\\n> Commit: ${{ env.SHORT_SHA }}\\n> 이미지: ${{ env.FULL_IMAGE }}\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      # 7. 실패 알림
      - name: Notify Discord on Failure
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ **[${{ env.ENV }} 환경]** Docker BE **CI** 실패\\n> Branch: \`${{ env.BRANCH }}\`)\\n> Commit: ${{ env.SHORT_SHA }}\\n> [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

  backend-cd:
    name: Backend Terraform CD
    needs: backend-ci
    if: needs.backend-ci.result == 'success'
    runs-on: ubuntu-latest
    env:
      BRANCH: ${{ needs.backend-ci.outputs.BRANCH }}
      SHORT_SHA: ${{ needs.backend-ci.outputs.SHORT_SHA }}
      #IMAGE: ${{ needs.backend-ci.outputs.FULL_IMAGE }}
    outputs:
      BRANCH: ${{ env.BRANCH }}
      ACTIVE: ${{ steps.active.outputs.active }}
      TARGET: ${{ steps.color.outputs.target }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

          # 3. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables from SSM
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }


          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=PROD" >> $GITHUB_ENV
            load_secret_to_file "/global/gcp/PROD_GCP_SA_KEY_DOCKER" gcp-sa-key.json
          else
            echo "ENV=STAGE" >> $GITHUB_ENV
            load_secret_to_file "/global/gcp/DEV_GCP_SA_KEY_DOCKER" gcp-sa-key.json
          fi

          load_param "/global/GITHUB_TOKEN" GITHUB_TOKEN
          load_param "/global/TFC_TOKEN" TF_TOKEN_app_terraform_io

          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPOSITORY=tuning-springboot
          IMAGE_TAG="${BRANCH}-${SHORT_SHA}"
          echo "IMAGE=${ECR_REGISTRY}/${REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Checkout Terraform repo
        uses: actions/checkout@v3
        with:
          repository: 100-hours-a-week/2-hertz-cloud
          ref: develop
          path: tf-code
          token: ${{ env.GITHUB_TOKEN }}

      - name: Read GCP SA key JSON
        run: |
          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ env.SA_KEY }}"

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Install Terraform v1.11.3 manually
        run: |
          curl -fsSL -o terraform.zip https://releases.hashicorp.com/terraform/1.11.3/terraform_1.11.3_linux_amd64.zip
          unzip terraform.zip
          mkdir -p $HOME/bin
          mv terraform $HOME/bin/
          export PATH="$HOME/bin:$PATH"   # 현재 step에 반영
          echo "$HOME/bin" >> $GITHUB_PATH
          terraform version

      # STAGE 환경에서 FE 개발을 위한 Redirec URL 변경 로직
      - name: Update SSM parameter
        if: env.ENV == 'STAGE'
        run: |

          if [[ "${{ github.event.inputs.redirect_url }}" == "local" ]]; then
            REDIRECT_URL="${{ secrets.REDIRECT_URL_LOCAL }}"
          elif [[ "${{ github.event.inputs.redirect_url }}" == "dev" ]]; then
            REDIRECT_URL="${{ secrets.REDIRECT_URL_DEV }}"
          elif [[ "${{ github.event.inputs.redirect_url }}" == "stage" ]]; then
            REDIRECT_URL="${{ secrets.REDIRECT_URL_APP }}"
          else
            REDIRECT_URL="${{ secrets.REDIRECT_URL_APP }}"
          fi

          aws ssm put-parameter \
            --name "${{ secrets.SSM_PATH_REDIRECT_URL }}" \
            --value "$REDIRECT_URL" \
            --type "SecureString" \
            --overwrite

      - name: Check if backend_tg exists and fallback to full apply
        if: env.ENV == 'STAGE'
        working-directory: tf-code/terraform/gcp/environments/develop
        run: |
          terraform init -reconfigure

          echo "🔍 Terraform 리소스 존재 여부 확인 중..."

          if terraform state list | grep -q "module.backend_ig"; then
            echo "✅ Terraform 리소스가 존재합니다. 배포를 시작합니다."
          else
            echo "⚠️ Terraform 리소스가 없습니다. 전체 apply를 수행합니다."
            terraform apply -auto-approve
          fi

      - name: Deploy to Dev Environment
        if: env.ENV == 'STAGE'
        working-directory: tf-code/terraform/gcp/environments/develop
        run: |
          terraform init -reconfigure

          echo "{" > 01-deployment.auto.tfvars.json
          echo "  \"docker_image_back_blue\": \"${{ env.IMAGE }}\"," >> 01-deployment.auto.tfvars.json
          echo "  \"instance_count\": {\"min\": 1, \"max\": 1}" >> 01-deployment.auto.tfvars.json
          echo "}" >> 01-deployment.auto.tfvars.json

          cat 01-deployment.auto.tfvars.json

          terraform apply -auto-approve -target=module.backend_ig

          echo "💾 Output 적용 중 ..."
          terraform apply -refresh-only -auto-approve
          terraform output -json

      - name: Check MIG Health (Dev)
        if: env.ENV == 'STAGE'
        env:
          REGION: asia-east1 # DEV 환경에 맞게 수정
        run: |
          MIG_NAME="dev-be-ig-a" # DEV MIG 이름으로 수정
          RETRY=10
          SLEEP_SEC=30
          echo "⏱ 60초 대기 중... 인스턴스 초기화 및 헬스체크 준비"
          sleep 60

          echo "🩺 $MIG_NAME 인스턴스 헬스체크 시작..."
          sleep 60 # Wait for instances to initialize

          for i in $(seq 1 $RETRY); do
            echo "[$i/$RETRY] $MIG_NAME 인스턴스 상태 확인 중..."
            gcloud compute instance-groups managed list-instances "$MIG_NAME" --region="$REGION" --format="value(status,version.instanceTemplate,instanceHealth[0].detailedHealthState)" > states.txt
            cat states.txt

            HEALTHY_COUNT=$(grep -c "HEALTHY" states.txt || true)
            TOTAL_COUNT=$(wc -l < states.txt)

            if [ "$HEALTHY_COUNT" -eq "$TOTAL_COUNT" ] && [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "✅ 모든 인스턴스가 HEALTHY 상태입니다 ($HEALTHY_COUNT/$TOTAL_COUNT)."
              exit 0
            else
              echo "⏳ 준비된 인스턴스 ($HEALTHY_COUNT/$TOTAL_COUNT). ${SLEEP_SEC}s 대기..."
              sleep $SLEEP_SEC
            fi
          done

          echo "❌ ${RETRY}회 시도 후에도 MIG 인스턴스가 HEALTHY 상태가 아닙니다."
          exit 1

      - name: Check if backend_tg exists and fallback to full apply
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          terraform init -reconfigure

          echo "🔍 Terraform 리소스 존재 여부 확인 중..."

          if terraform state list | grep -q "module.backend_tg"; then
            echo "✅ Terraform 리소스가 존재합니다. 바로 배포를 시작합니다."
          else
            echo "⚠️ Terraform 리소스가 없습니다. 전체 apply를 수행합니다."
            terraform apply -auto-approve
          fi

      - name: Get Active Deployment Color
        if: env.ENV == 'PROD'
        id: active
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          terraform init -reconfigure

          BLUE_MAX=$(terraform output -json | jq -r '.blue_instance_count_backend.value.max')
          GREEN_MAX=$(terraform output -json | jq -r '.green_instance_count_backend.value.max')

          echo "BLUE_MAX: $BLUE_MAX"
          echo "GREEN_MAX: $GREEN_MAX"

          if [ "$BLUE_MAX" = "0" ]; then
            echo "✅ Active deployment is GREEN"
            echo "active=green" >> $GITHUB_OUTPUT
          elif [ "$GREEN_MAX" = "0" ]; then
            echo "✅ Active deployment is BLUE"
            echo "active=blue" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Both blue and green have non-zero max. Defaulting to blue"
            echo "active=blue" >> $GITHUB_OUTPUT
          fi

      - name: Determine Next Deployment Color
        if: env.ENV == 'PROD'
        id: color
        run: |
          if [ "${{ steps.active.outputs.active }}" = "green" ]; then
            echo "target=blue" >> $GITHUB_OUTPUT
          else
            echo "target=green" >> $GITHUB_OUTPUT
          fi

      - name: Write tfvars file for next deployment
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          ACTIVE=${{ steps.active.outputs.active }}
          TARGET=${{ steps.color.outputs.target }}

          echo "{" > 01-deployment.auto.tfvars.json
          echo "  \"docker_image_back_${TARGET}\": \"${{ env.IMAGE }}\"," >> 01-deployment.auto.tfvars.json
          echo "  \"traffic_weight_${TARGET}_backend\": 0," >> 01-deployment.auto.tfvars.json
          echo "  \"traffic_weight_${ACTIVE}_backend\": 100," >> 01-deployment.auto.tfvars.json
          echo "  \"${TARGET}_instance_count_backend\": {\"min\": 1, \"max\": 2}," >> 01-deployment.auto.tfvars.json
          echo "  \"${ACTIVE}_instance_count_backend\": {\"min\": 1, \"max\": 2}" >> 01-deployment.auto.tfvars.json
          echo "}" >> 01-deployment.auto.tfvars.json

          cat 01-deployment.auto.tfvars.json
          terraform apply -auto-approve \
            -target=module.backend_tg \
            -target=module.backend_internal_asg_${TARGET}

          echo "💾 Output 적용 중 ..."
          terraform apply -refresh-only -auto-approve
          terraform output -json

      - name: Wait before health check
        if: env.ENV == 'PROD'
        run: |
          SLEEP_SEC=60
          echo "⏱ ${SLEEP_SEC}초 대기 중... 인스턴스 초기화 및 헬스체크 준비"
          sleep ${SLEEP_SEC}

      - name: Check MIG Health
        if: env.ENV == 'PROD'
        env:
          REGION: asia-east1
          TARGET: ${{ steps.color.outputs.target }}
        run: |
          MIG_NAME="prod-backend-${TARGET}-b"
          RETRY=10
          SLEEP_SEC=30

          echo "🩺 $MIG_NAME 인스턴스 헬스체크 시작..."

          for i in $(seq 1 $RETRY); do
            echo "[$i/$RETRY] $MIG_NAME 인스턴스 상태 확인 중..."

            gcloud compute instance-groups managed list-instances "$MIG_NAME" \
              --region="$REGION" \
              --format="value(HEALTH_STATE)" > states.txt

            cat states.txt

            HEALTHY_COUNT=$(grep -c "HEALTHY" states.txt || true)
            TOTAL_COUNT=$(wc -l < states.txt)

            if [ "$HEALTHY_COUNT" -eq "$TOTAL_COUNT" ] && [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "✅ 모든 인스턴스가 HEALTHY 상태입니다 ($HEALTHY_COUNT/$TOTAL_COUNT)."
              exit 0
            else
              echo "⏳ 준비된 인스턴스 ($HEALTHY_COUNT/$TOTAL_COUNT). ${SLEEP_SEC}s 대기..."
              sleep $SLEEP_SEC
            fi
          done

          echo "❌ ${RETRY}회 시도 후에도 MIG 인스턴스가 HEALTHY 상태가 아닙니다."
          exit 1

      - name: Write tfvars for shift traffic (half)
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          terraform init -reconfigure

          BLUE_MAX=$(terraform output -json | jq -r '.blue_instance_count_backend.value.max')
          GREEN_MAX=$(terraform output -json | jq -r '.green_instance_count_backend.value.max')
          echo "BLUE_MAX-before-half: $BLUE_MAX"
          echo "GREEN_MAX-before-half: $GREEN_MAX"

          ACTIVE=${{ steps.active.outputs.active }}
          TARGET=${{ steps.color.outputs.target }}
          echo "{" > 02-shift-half.auto.tfvars.json
          echo "  \"traffic_weight_${ACTIVE}_backend\": 50," >> 02-shift-half.auto.tfvars.json
          echo "  \"traffic_weight_${TARGET}_backend\": 50" >> 02-shift-half.auto.tfvars.json
          echo "}" >> 02-shift-half.auto.tfvars.json
          terraform apply -auto-approve \
            -target=module.backend_tg \

          echo "💾 Output 적용 중 ..."
          terraform apply -refresh-only -auto-approve
          terraform output -json

      - name: Write tfvars for shift traffic (full)
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          ACTIVE=${{ steps.active.outputs.active }}
          TARGET=${{ steps.color.outputs.target }}
          echo "{" > 03-shift-full.auto.tfvars.json
          echo "  \"traffic_weight_${ACTIVE}_backend\": 0," >> 03-shift-full.auto.tfvars.json
          echo "  \"traffic_weight_${TARGET}_backend\": 100" >> 03-shift-full.auto.tfvars.json
          echo "}" >> 03-shift-full.auto.tfvars.json
          terraform apply -auto-approve \
            -target=module.backend_tg

          echo "💾 Output 적용 중 ..."
          terraform apply -refresh-only -auto-approve
          terraform output -json

      - name: Scale Down Previous Environment
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          ACTIVE=${{ steps.active.outputs.active }}
          echo "{" > 04-scale-down.auto.tfvars.json
          echo "  \"${ACTIVE}_instance_count_backend\": {\"min\":0, \"max\":0}" >> 04-scale-down.auto.tfvars.json
          echo "}" >> 04-scale-down.auto.tfvars.json
          terraform apply -auto-approve \
            -target=module.backend_internal_asg_${ACTIVE}.google_compute_region_autoscaler.this \

          echo "💾 Output 적용 중 ..."
          terraform apply -refresh-only -auto-approve
          terraform output -json

      - name: Notify Discord on Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"✅ **[${{ env.ENV }} 환경]** Docker BE **CD** 성공\\n> Branch: \`${{ env.BRANCH }}\`)\\n> Commit: ${{ env.SHORT_SHA }}\\n> 이미지: ${{ env.FULL_IMAGE }}\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ **[${{ env.ENV }} 환경]** Docker BE **CD** 실패\\n> Branch: \`${{ env.BRANCH }}\`)\\n> Commit: ${{ env.SHORT_SHA }}\\n> [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

  backend-rollback:
    name: backend Terraform Rollback
    needs: backend-cd
    if: always() && needs.backend-cd.result != 'success'
    runs-on: ubuntu-latest
    env:
      BRANCH: ${{ needs.backend-ci.outputs.BRANCH }}
      ACTIVE: ${{ needs.backend-cd.outputs.ACTIVE }}
      TARGET: ${{ needs.backend-cd.outputs.TARGET }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set environment variables from SSM
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }

          BRANCH="${{ env.BRANCH }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=PROD" >> $GITHUB_ENV
            load_secret_to_file "/global/gcp/PROD_GCP_SA_KEY_DOCKER" gcp-sa-key.json
          else
            echo "ENV=STAGE" >> $GITHUB_ENV
            load_secret_to_file "/global/gcp/DEV_GCP_SA_KEY_DOCKER" gcp-sa-key.json
          fi

          load_param "/global/GITHUB_TOKEN" GITHUB_TOKEN
          load_param "/global/TFC_TOKEN" TF_TOKEN_app_terraform_io

      - name: Notify for STAGE Rollback
        if: env.ENV == 'STAGE'
        run: |
          echo "❗STAGE 환경 배포에 실패했습니다."
          echo "❗STAGE 환경은 Blue/Green 배포가 아니므로 자동 롤백 작업이 없습니다."
          echo "❗GCP 콘솔에서 'dev-backend-a' Managed Instance Group의 상태를 직접 확인해주세요."

      - name: Checkout Terraform repo
        if: env.ENV == 'PROD'
        uses: actions/checkout@v3
        with:
          repository: 100-hours-a-week/2-hertz-cloud
          ref: develop
          path: tf-code
          token: ${{ env.GITHUB_TOKEN }}

      - name: Read GCP SA key JSON
        if: env.ENV == 'PROD'
        run: |
          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate to GCP
        if: env.ENV == 'PROD'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ env.SA_KEY }}"

      - name: Install Terraform CLI manually
        run: |
          curl -fsSL -o terraform.zip https://releases.hashicorp.com/terraform/1.11.3/terraform_1.11.3_linux_amd64.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          terraform -version

      - name: Send rollback start notification
        if: env.ENV == 'STAGE'
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"🔄 **[${{ env.ENV }} 환경]** Docker BE 롤백을 실행합니다\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Write tfvars file for rollback
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          terraform init -reconfigure

          ACTIVE=${{ env.ACTIVE }}
          TARGET=${{ env.TARGET }}

          echo "{" > 999-rollback.auto.tfvars.json
          echo "  \"traffic_weight_${TARGET}_backend\": 0," >> 999-rollback.auto.tfvars.json
          echo "  \"traffic_weight_${ACTIVE}_backend\": 100," >> 999-rollback.auto.tfvars.json
          echo "  \"${TARGET}_instance_count_backend\": {\"min\": 0, \"max\": 0}," >> 999-rollback.auto.tfvars.json
          echo "  \"${ACTIVE}_instance_count_backend\": {\"min\": 1, \"max\": 2}" >> 999-rollback.auto.tfvars.json
          echo "}" >> 999-rollback.auto.tfvars.json

          terraform apply -auto-approve \
            -target=module.backend_internal_asg_${ACTIVE}.google_compute_region_autoscaler.this \
            -target=module.backend_internal_asg_${TARGET}.google_compute_region_autoscaler.this \
            -target=module.backend_tg

          echo "💾 Output 적용 중 ..."
          terraform apply -refresh-only -auto-approve
          terraform output -json

      - name: Send success notification
        if: success() && env.ENV == 'PROD'
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"✅ **[${{ env.ENV }} 환경]** Docker BE 롤백 완료\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send failure notification
        if: failure() && env.ENV == 'PROD'
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"❌ **[${{ env.ENV }} 환경]** Docker BE 롤백 실패\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}
