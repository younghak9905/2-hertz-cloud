name: Stop GCP Instance

on:
  workflow_dispatch:
    inputs:
      target:
        description: "중지할 인스턴스 선택"
        required: true
        default: "BE"
        type: choice
        options:
          - "BE"
          - "AI"
          - "GPU"
          - "CHAT-REPORT"

env:
  PROJECT_ID: ${{ secrets.PROD_GCP_PROJECT_ID }}
  PROJECT_ID_DEV: ${{ secrets.DEV_GCP_PROJECT_ID }}
  ZONE: ${{ secrets.GCP_ZONE }}
  PROD_ZONE_AI: ${{ secrets.PROD_GCP_ZONE_AI }}
  DEV_ZONE_AI: ${{ secrets.DEV_GCP_ZONE_AI }}
  PROD_INSTANCE: ${{ secrets.PROD_GCP_INSTANCE }}
  DEV_INSTANCE: ${{ secrets.DEV_GCP_INSTANCE }}
  PROD_INSTANCE_AI: ${{ secrets.PROD_GCP_INSTANCE_AI }}
  DEV_INSTANCE_AI: ${{ secrets.DEV_GCP_INSTANCE_AI }}
  PROD_INSTANCE_GPU: ${{ secrets.PROD_INSTANCE_GPU }}
  PROJECT_ID_GPU: ${{ secrets.PROJECT_ID_GPU }}
  PROJECT_ID_CHAT_REPORT: ${{ secrets.PROD_GCP_PROJECT_ID }}
  PROD_INSTANCE_CHAT_REPORT: ${{ secrets.PROD_INSTANCE_CHAT_REPORT }}

  

jobs:
  stop-instance:
    runs-on: ubuntu-latest

    steps:
      - name: Set environment
        run: |
          BRANCH="${{ github.ref_name }}"
          TARGET="${{ github.event.inputs.target }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "TARGET=$TARGET" >> $GITHUB_ENV

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ env.PROJECT_ID }}" >> $GITHUB_ENV
            if [[ "$TARGET" == "AI" ]]; then
              echo "INSTANCE=${{ env.PROD_INSTANCE_AI }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.PROD_ZONE_AI }}" >> $GITHUB_ENV
            elif [[ "$TARGET" == "GPU" ]]; then
              echo "PROJECT_ID=${{ env.PROJECT_ID_GPU }}" >> $GITHUB_ENV
              echo "INSTANCE=${{ env.PROD_INSTANCE_GPU }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            elif [[ "$TARGET" == "CHAT-REPORT" ]]; then
              echo "PROJECT_ID=${{ env.PROJECT_ID_CHAT_REPORT }}" >> $GITHUB_ENV
              echo "INSTANCE=${{ env.PROD_INSTANCE_CHAT_REPORT }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            else
              echo "INSTANCE=${{ env.PROD_INSTANCE }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            fi
          else
            echo "ENV=develop" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ env.PROJECT_ID_DEV }}" >> $GITHUB_ENV
            if [[ "$TARGET" == "AI" ]]; then
              echo "INSTANCE=${{ env.DEV_INSTANCE_AI }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.DEV_ZONE_AI }}" >> $GITHUB_ENV
            elif [[ "$TARGET" == "GPU" ]]; then
              echo "PROJECT_ID=${{ env.PROJECT_ID_GPU }}" >> $GITHUB_ENV
              echo "INSTANCE=${{ env.PROD_INSTANCE_GPU }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            elif [[ "$TARGET" == "CHAT-REPORT" ]]; then
              echo "PROJECT_ID=${{ env.PROJECT_ID_CHAT_REPORT }}" >> $GITHUB_ENV
              echo "INSTANCE=${{ env.PROD_INSTANCE_CHAT_REPORT }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            else
              echo "INSTANCE=${{ env.DEV_INSTANCE }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            fi
          fi

      - name: Authenticate to GCP
        if: github.ref_name == 'main' && github.event.inputs.target != 'GPU'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Authenticate to GCP (develop)
        if: github.ref_name != 'main' && github.event.inputs.target != 'GPU'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_SA_KEY }}
      
      - name: Authenticate to GCP GPU
        if: github.event.inputs.target == 'GPU'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GPU_SA_KEY }}
      
      - name: Authenticate to GCP CHAT-REPORT
        if: github.event.inputs.target == 'CHAT-REPORT'
        uses: google-github-actions/auth@v1
        with:
            credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}



      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Stop target instance
        run: |
          echo "⚡ 중지할 인스턴스: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "🔎 현재 상태: $STATUS"

          if [[ "$STATUS" == "RUNNING" ]]; then
            gcloud compute instances stop "$INSTANCE" --zone="$ZONE"
            echo "🛑 인스턴스 중지 완료"
          else
            echo "ℹ️ 중지 생략: 현재 상태는 '$STATUS'"
          fi

      - name: Send notification Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"🛑 [GCP 인스턴스 중지 완료] **${{ env.ENV }}** - 대상: ${{ env.TARGET }} (브랜치: \`${{ env.BRANCH }}\`)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send notification failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"❌ [GCP 인스턴스 중지 실패] **${{ env.ENV }}** - 대상: ${{ env.TARGET }} (브랜치: \`${{ env.BRANCH }}\`)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}ㄱ
