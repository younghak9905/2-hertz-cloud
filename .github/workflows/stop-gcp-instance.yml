name: Stop GCP Instance

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Ï§ëÏßÄÌï† Ïù∏Ïä§ÌÑ¥Ïä§ ÏÑ†ÌÉù"
        required: true
        default: "BE"
        type: choice
        options:
          - "BE"
          - "AI"
          - "GPU"
          - "CHAT-REPORT"
          - "CHAT-REPORT-TEST"
          - "TEST"
          - "KAFKA"

env:
  PROJECT_ID: ${{ secrets.PROD_GCP_PROJECT_ID }}
  PROJECT_ID_DEV: ${{ secrets.DEV_GCP_PROJECT_ID }}
  ZONE: ${{ secrets.GCP_ZONE }}
  PROD_ZONE_AI: ${{ secrets.PROD_GCP_ZONE_AI }}
  DEV_ZONE_AI: ${{ secrets.DEV_GCP_ZONE_AI }}
  PROD_INSTANCE: ${{ secrets.PROD_GCP_INSTANCE }}
  DEV_INSTANCE: ${{ secrets.DEV_GCP_INSTANCE }}
  PROD_INSTANCE_AI: ${{ secrets.PROD_GCP_INSTANCE_AI }}
  DEV_INSTANCE_AI: ${{ secrets.DEV_GCP_INSTANCE_AI }}
  PROD_INSTANCE_GPU: ${{ secrets.PROD_INSTANCE_GPU }}
  PROJECT_ID_GPU: ${{ secrets.PROJECT_ID_GPU }}
 

  

jobs:
  stop-instance:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        if: ${{ inputs.target == 'TEST' || inputs.target == 'KAFKA' || inputs.target == 'CHAT-REPORT' || inputs.target == 'CHAT-REPORT-TEST'  }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        if: ${{ inputs.target == 'TEST' || inputs.target == 'KAFKA' || inputs.target == 'CHAT-REPORT' || inputs.target == 'CHAT-REPORT-TEST'  }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set environment variables from SSM
        if: ${{ inputs.target == 'TEST' || inputs.target == 'KAFKA' || inputs.target == 'CHAT-REPORT' || inputs.target == 'CHAT-REPORT-TEST' }}
        env:
          TARGET: ${{ inputs.target }}
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }
          BRANCH="develop"  # Í∞úÎ∞ú ÌôòÍ≤ΩÏùÑ ÏúÑÌïú Î∏åÎûúÏπò ÏÑ§Ï†ï
          SANITIZED_BRANCH="${BRANCH//\//-}"
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
          BRANCH="$SANITIZED_BRANCH"
          echo "ENV=develop" >> $GITHUB_ENV
          if [[ "$TARGET" == "TEST" ]]; then
            load_param "/global/gcp/test/HOST" HOST
            load_param "/global/gcp/test/INSTANCE" INSTANCE
            load_param "/global/gcp/test/PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/test/ZONE" ZONE
            load_secret_to_file "/global/gcp/test/SA_KEY" gcp-sa-key.json
          elif [[ "$TARGET" == "KAFKA" ]]; then
            load_param "/global/gcp/kafka/HOST" HOST
            load_param "/global/gcp/kafka/INSTANCE" INSTANCE
            load_param "/global/gcp/kafka/PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/kafka/ZONE" ZONE
            load_secret_to_file "/global/gcp/kafka/SA_KEY" gcp-sa-key.json
          elif [[ "$TARGET" == "CHAT-REPORT" ]]; then
            load_param "/global/gcp/chat/GCP_HOST" HOST
            load_param "/global/gcp/chat/GCP_INSTANCE" INSTANCE
            load_param "/global/gcp/chat/GCP_PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/chat/GCP_ZONE" ZONE
            load_secret_to_file "/global/gcp/chat/GCP_SA_KEY" gcp-sa-key.json      
          elif [[ "$TARGET" == "CHAT-REPORT-TEST" ]]; then
            load_param "/global/gcp/chat/GCP_HOST_TEST" HOST
            load_param "/global/gcp/chat/GCP_INSTANCE_TEST" INSTANCE
            load_param "/global/gcp/chat/GCP_PROJECT_ID_TEST" PROJECT_ID
            load_param "/global/gcp/chat/GCP_ZONE_TEST" ZONE
            load_secret_to_file "/global/gcp/chat/GCP_SA_KEY_TEST" gcp-sa-key.json
          else
            echo "‚ùå ÏûòÎ™ªÎêú ÌÉÄÍ≤ü: $TARGET"
            exit 1
          fi


          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "TARGET=${{ inputs.target}}" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "ENV=$BRANCH" >> $GITHUB_ENV


      - name: Set environment
        if: ${{ inputs.target != 'TEST' && inputs.target != 'KAFKA' && inputs.target != 'CHAT-REPORT' && inputs.target != 'CHAT-REPORT-TEST' }}        
        run: |
          BRANCH="${{ github.ref_name }}"
          TARGET="${{ github.event.inputs.target }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "TARGET=$TARGET" >> $GITHUB_ENV

          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ env.PROJECT_ID }}" >> $GITHUB_ENV
            if [[ "$TARGET" == "AI" ]]; then
              echo "INSTANCE=${{ env.PROD_INSTANCE_AI }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.PROD_ZONE_AI }}" >> $GITHUB_ENV
            elif [[ "$TARGET" == "GPU" ]]; then
              echo "PROJECT_ID=${{ env.PROJECT_ID_GPU }}" >> $GITHUB_ENV
              echo "INSTANCE=${{ env.PROD_INSTANCE_GPU }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            else
              echo "INSTANCE=${{ env.PROD_INSTANCE }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            fi
          else
            echo "ENV=develop" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ env.PROJECT_ID_DEV }}" >> $GITHUB_ENV
            if [[ "$TARGET" == "AI" ]]; then
              echo "INSTANCE=${{ env.DEV_INSTANCE_AI }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.DEV_ZONE_AI }}" >> $GITHUB_ENV
            elif [[ "$TARGET" == "GPU" ]]; then
              echo "PROJECT_ID=${{ env.PROJECT_ID_GPU }}" >> $GITHUB_ENV
              echo "INSTANCE=${{ env.PROD_INSTANCE_GPU }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            # elif [[ "$TARGET" == "CHAT-REPORT" ]]; then
            #   echo "PROJECT_ID=${{ env.PROJECT_ID_CHAT_REPORT }}" >> $GITHUB_ENV
            #   echo "INSTANCE=${{ env.PROD_INSTANCE_CHAT_REPORT }}" >> $GITHUB_ENV
            #   echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            else
              echo "INSTANCE=${{ env.DEV_INSTANCE }}" >> $GITHUB_ENV
              echo "ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
            fi
          fi

      - name: Authenticate to GCP
        if: github.event.inputs.target  == 'TEST' || github.ref_name == 'main' && github.event.inputs.target != 'GPU' 
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Authenticate to GCP (develop)
        if: github.ref_name != 'main' && github.event.inputs.target != 'GPU' && github.event.inputs.target  != 'TEST' 
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_SA_KEY }}
      
      - name: Authenticate to GCP GPU
        if: github.event.inputs.target == 'GPU' && github.event.inputs.target  != 'TEST' || github.event.inputs.target == 'CHAT-REPORT-TEST'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GPU_SA_KEY }}
      
      - name: Authenticate to GCP CHAT-REPORT
        if: github.event.inputs.target == 'CHAT-REPORT' && github.event.inputs.target  != 'TEST' 
        uses: google-github-actions/auth@v1
        with:
            credentials_json: ${{ env.SA_KEY }}
      
      - name: Authenticate to GCP KAFKA
        if: github.event.inputs.target == 'KAFKA' 
        uses: google-github-actions/auth@v1
        with:
            credentials_json: ${{ env.SA_KEY }}



      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Debug gcloud auth & config
        if: ${{ inputs.target == 'KAFKA' }}
        run: |
          echo "‚ñ∂ Active account:"
          gcloud auth list --filter="status:ACTIVE" --format="value(account)"
          echo "‚ñ∂ Configured project:"
          gcloud config get-value project
          gcloud config set project "$PROJECT_ID"

      
      - name: Stop target instance(kfaka)
        if: ${{ inputs.target == 'KAFKA' }}
        run: |
            echo "‚ö° Ïù∏Ïä§ÌÑ¥Ïä§: $INSTANCE (zone: $ZONE, project: $PROJECT_ID)"
            STATUS=$(gcloud compute instances describe "$INSTANCE" \
              --zone="$ZONE" \
              --project="$PROJECT_ID" \
              --format="get(status)")
            echo "üîé ÌòÑÏû¨ ÏÉÅÌÉú: $STATUS"
  
            if [[ "$STATUS" == "RUNNING" ]]; then
              gcloud compute instances stop "$INSTANCE" \
                --zone="$ZONE" \
                --project="$PROJECT_ID"
              echo "üõë Ï§ëÏßÄ ÏôÑÎ£å"
            else
              echo "‚ÑπÔ∏è Ï§ëÏßÄ ÏÉùÎûµ: ÌòÑÏû¨Îäî '$STATUS'"
            fi

      - name: Stop target instance
        if: ${{ inputs.target != 'KAFKA' }}
        run: |
          echo "‚ö° Ï§ëÏßÄÌï† Ïù∏Ïä§ÌÑ¥Ïä§: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "üîé ÌòÑÏû¨ ÏÉÅÌÉú: $STATUS"

          if [[ "$STATUS" == "RUNNING" ]]; then
            gcloud compute instances stop "$INSTANCE" --zone="$ZONE"
            echo "üõë Ïù∏Ïä§ÌÑ¥Ïä§ Ï§ëÏßÄ ÏôÑÎ£å"
          else
            echo "‚ÑπÔ∏è Ï§ëÏßÄ ÏÉùÎûµ: ÌòÑÏû¨ ÏÉÅÌÉúÎäî '$STATUS'"
          fi

      - name: Send notification Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"üõë [GCP Ïù∏Ïä§ÌÑ¥Ïä§ Ï§ëÏßÄ ÏôÑÎ£å] **${{ env.ENV }}** - ÎåÄÏÉÅ: ${{ env.TARGET }} (Î∏åÎûúÏπò: \`${{ env.BRANCH }}\`)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send notification failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"‚ùå [GCP Ïù∏Ïä§ÌÑ¥Ïä§ Ï§ëÏßÄ Ïã§Ìå®] **${{ env.ENV }}** - ÎåÄÏÉÅ: ${{ env.TARGET }} (Î∏åÎûúÏπò: \`${{ env.BRANCH }}\`)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}„Ñ±
