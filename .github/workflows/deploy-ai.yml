name: Deploy AI (SSH)
on:
  workflow_dispatch:
    inputs:
      service:
        description: "tuning-api, chat-report"
        required: true
        default: "tuning-api"
        type: choice
        options:
          - "tuning-api"
          - "app.hertz-tuning-api"
          - "chat-report"
      rollback:
        description: "Î°§Î∞± Î∞∞Ìè¨Î•º ÏàòÌñâÌï†ÍπåÏöî?"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      deploy_type:
        description: "Î∞∞Ìè¨ Î∞©ÏãùÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî (docker-compose or pm2)"
        required: true
        default: "docker"
        type: choice
        options:
          - "docker"
          - "pm2"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        if: ${{ github.event.inputs.service == 'app.hertz-tuning-api' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR (app.hertz-tuning-api)
        if: ${{ github.event.inputs.service == 'app.hertz-tuning-api' }}
        uses: aws-actions/amazon-ecr-login@v1


      - name: Set environment variables from SSM
        if: ${{ github.event.inputs.service == 'app.hertz-tuning-api' }}
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }
          BRANCH="develop"  # Í∞úÎ∞ú ÌôòÍ≤ΩÏùÑ ÏúÑÌïú Î∏åÎûúÏπò ÏÑ§Ï†ï
          SANITIZED_BRANCH="${BRANCH//\//-}"
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
          BRANCH="$SANITIZED_BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "ENV=develop" >> $GITHUB_ENV
          load_param "/global/gcp/app/GCP_HOST" HOST
          load_param "/global/gcp/app/GCP_INSTANCE" INSTANCE
          load_param "/global/gcp/app/GCP_PROJECT_ID" PROJECT_ID
          load_param "/global/gcp/app/GCP_ZONE" ZONE
          load_secret_to_file "/global/gcp/app/GCP_SA_KEY" gcp-sa-key.json
          echo "GCP_SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          

      - name: Authenticate to GCP (app.hertz-tuning-api)
        if: ${{ github.event.inputs.service == 'app.hertz-tuning-api' }}
        uses: google-github-actions/auth@v1
        with:
            credentials_json: ${{ env.GCP_SA_KEY }}
      
      - name: Setup gcloud CLI
        if: ${{ github.event.inputs.service == 'app.hertz-tuning-api' }}
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        if: ${{ github.event.inputs.service == 'app.hertz-tuning-api' }}
        run: |
              echo "‚ö° Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë: $INSTANCE (zone: $ZONE)"
              STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
              echo "üîé ÌòÑÏû¨ ÏÉÅÌÉú: $STATUS"
    
              if [[ "$STATUS" == "SUSPENDED" ]]; then
                echo "üîÑ 'resume' Î™ÖÎ†π Ïã§Ìñâ"
                gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
                echo "‚è≥ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌõÑ 30Ï¥à ÎåÄÍ∏∞..."
                sleep 30
              elif [[ "$STATUS" == "TERMINATED" ]]; then
                echo "üîÑ 'start' Î™ÖÎ†π Ïã§Ìñâ"
                gcloud compute instances start "$INSTANCE" --zone="$ZONE"
                echo "‚è≥ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌõÑ 30Ï¥à ÎåÄÍ∏∞..."
                sleep 30
              else
                echo "‚úÖ Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ë - ÎåÄÍ∏∞ ÏÉùÎûµ"
              fi
              //Ï¢ÖÎ£å
               
              exit 0
              
      - name: Set environment
        if: ${{ github.event.inputs.service != 'app.hertz-tuning-api' }}
        run: |
          BRANCH="${{ github.ref_name }}"
          SERVICE="${{ github.event.inputs.service }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "SERVICE=$SERVICE" >> $GITHUB_ENV


          if [[ "$BRANCH" == "main" && "$SERVICE" == "tuning-api" ]]; then
            echo "ENV=PROD" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.PROD_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.PROD_GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "ZONE=${{ secrets.PROD_GCP_ZONE_AI }}" >> $GITHUB_ENV
          elif [[ "$SERVICE" == "chat-report" ]]; then
            echo "ENV=DEV" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_GCP_CHAT_REPORT }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.PROD_INSTANCE_CHAT_REPORT }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.PROD_GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "ZONE=${{ secrets.GCP_ZONE }}" >> $GITHUB_ENV
          else
            echo "ENV=DEV" >> $GITHUB_ENV
            echo "HOST=${{ secrets.DEV_GCP_HOST_AI }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.DEV_GCP_INSTANCE_AI }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.DEV_GCP_PROJECT_ID }}" >> $GITHUB_ENV
            echo "ZONE=${{ secrets.DEV_GCP_ZONE_AI }}" >> $GITHUB_ENV
          fi

          echo "ROLLBACK=${{ github.event.inputs.rollback }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
          echo "DEPLOY_TYPE=${{ github.event.inputs.deploy_type }}" >> $GITHUB_ENV

      - name: Set deploy message
        run: |
          if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            echo "DEPLOY_MESSAGE=üö® **[${{ env.ENV }} ÌôòÍ≤Ω]** ${{ github.event.inputs.service }} Î°§Î∞± ÏôÑÎ£å(ÏàòÎèô)" >> $GITHUB_ENV
          elif [[ "${{ env.SERVICE }}" == "chat-report" ]]; then
            echo "DEPLOY_MESSAGE=üöÄ **[${{ env.ENV }} ÌôòÍ≤Ω]** ${{ github.event.inputs.service }} Î∞∞Ìè¨ ÏôÑÎ£å(ÏàòÎèô)" >> $GITHUB_ENV
          else
            echo "DEPLOY_MESSAGE=üöÄ **[${{ env.ENV }} ÌôòÍ≤Ω]** ${{ github.event.inputs.service }}" >> $GITHUB_ENV
          fi

      - name: Authenticate to GCP
        if: github.ref_name == 'main' && env.SERVICE == 'tuning-api'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Authenticate to GCP (Stage)
        if: github.ref_name != 'main' && env.SERVICE == 'tuning-api'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_SA_KEY }}
      
      - name: Authenticate to GCP (chat-report)
        if: env.SERVICE != 'tuning-api'
        uses: google-github-actions/auth@v1
        with:
            credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}


      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        run: |
          echo "‚ö° Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "üîé ÌòÑÏû¨ ÏÉÅÌÉú: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "üîÑ 'resume' Î™ÖÎ†π Ïã§Ìñâ"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
            echo "‚è≥ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌõÑ 30Ï¥à ÎåÄÍ∏∞..."
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "üîÑ 'start' Î™ÖÎ†π Ïã§Ìñâ"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
            echo "‚è≥ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌõÑ 30Ï¥à ÎåÄÍ∏∞..."
            sleep 30
          else
            echo "‚úÖ Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ë - ÎåÄÍ∏∞ ÏÉùÎûµ"
          fi

        # 2. AWS Ïù∏Ï¶ù
      - name: Configure AWS credentials
        if: env.DEPLOY_TYPE == 'docker' && env.SERVICE == 'tuning-api'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. ECR Î°úÍ∑∏Ïù∏
      - name: Login to Amazon ECR
        if: env.DEPLOY_TYPE == 'docker' && env.SERVICE == 'tuning-api'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set registry
        if: env.DEPLOY_TYPE == 'docker' && env.SERVICE == 'tuning-api'
        run: echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: AWS_REGION,ECR_REGISTRY

          script: |

            if [[ "${{ env.DEPLOY_TYPE }}" == "docker" && ${{ env.SERVICE }} == 'tuning-api' ]]; then

              echo "üöÄ Docker Î∞∞Ìè¨ ÏãúÏûë..."
              cd /home/deploy
              pm2 stop ecosystem.config.js || true
              aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
              sleep 5

              docker compose --env-file .env up -d
            elif [[ "${{ env.SERVICE }}" == "chat-report" ]]; then
              echo "üöÄ Docker Î∞∞Ìè¨ ÏãúÏûë..."
              cd /home/deploy
              ./ai_deploy.sh
              sleep 5
            else 
              echo "üöÄ PM2 Î∞∞Ìè¨ ÏãúÏûë..."
              cd /home/deploy
              docker compose --env-file .env stop || true
              sleep 10
              pm2 restart ecosystem.config.js
              chmod +x ai_deploy.sh
              if [[ "${{ env.ROLLBACK }}" == "true" ]]; then
                ./ai_deploy.sh --rollback
              else
                ./ai_deploy.sh
              fi
            fi

      - name: Wait for FastAPI to start
        run: |
          echo "üïí FastAPI ÏÑúÎ≤Ñ Í∏∞Îèô ÎåÄÍ∏∞ Ï§ë..."
          sleep 15

      - name: AI ÏÑúÎ≤Ñ Ìó¨Ïä§Ï≤¥ÌÅ¨ (FastAPI Swagger docs)
        run: |
            echo "üîç AI ÏÑúÎ≤Ñ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏãúÏûë (FastAPI Swagger docs)... ÏµúÎåÄ 5Ìöå ÏãúÎèÑÌï©ÎãàÎã§."
        
            # ÏÑúÎπÑÏä§ ÌÉÄÏûÖÏóê Îî∞Îùº Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏ Î∂ÑÍ∏∞
            if [[ "$SERVICE" == "tuning-api" ]]; then
              echo "üöÄ tuning-api Ìó¨Ïä§Ï≤¥ÌÅ¨ (chromadb) ÏãúÏûë..."
              for i in {1..5}; do
                echo "‚è±Ô∏è ÏãúÎèÑ $i: http://$HOST:8000/api/v1/health/chromadb"
                if curl -sf "http://$HOST:8000/api/v1/health/chromadb"; then
                  echo "‚úÖ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏÑ±Í≥µ üéâ"
                  exit 0
                else
                  echo "‚ö†Ô∏è Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®. 15Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ..."
                  sleep 15
                fi
              done
        
            else
              echo "üöÄ chat-report Ìó¨Ïä§Ï≤¥ÌÅ¨ (/docs) ÏãúÏûë..."
              for i in {1..5}; do
                echo "‚è±Ô∏è ÏãúÎèÑ $i: http://$HOST:8000/docs"
                if curl -sf "http://$HOST:8000/docs"; then
                  echo "‚úÖ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏÑ±Í≥µ üéâ"
                  exit 0
                else
                  echo "‚ö†Ô∏è Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå®. 15Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ..."
                  sleep 15
                fi
              done
            fi
        
            echo "‚ùå 5Ìöå Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå® - AI ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅ Í∏∞ÎèôÎêòÏßÄ ÏïäÏùå"
            exit 1

      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"${{ env.DEPLOY_MESSAGE }}\\n> Branch: \`${{ env.BRANCH }}\`\\n> Commit: ${{ env.COMMIT_HASH }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"‚ùå **[${{ env.ENV }} ÌôòÍ≤Ω]** ${{ github.event.inputs.service }} Î∞∞Ìè¨ Ïã§Ìå®(ÏàòÎèô)\\n> Branch: \`${{ env.BRANCH }}\`\\n> Commit: ${{ env.COMMIT_HASH }}\\n> [ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î°úÍ∑∏ Î≥¥Í∏∞]($WORKFLOW_URL)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}
