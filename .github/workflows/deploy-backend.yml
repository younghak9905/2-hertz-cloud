name: Deploy Backend (SSH)

on:
  workflow_dispatch:
    inputs:
      rollback:
        description: "Î°§Î∞± Î∞∞Ìè¨Î•º ÏàòÌñâÌï†ÍπåÏöî?"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      project_id:
        description: "GCP ÌîÑÎ°úÏ†ùÌä∏ IDÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
        required: false
        default: "Tuning-DEV-01"
        type: choice
        options:
          - "Tuning-DEV-01"
          - "Tuning-PROD-01"
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set environment variables from SSM
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }
          load_param "/global/gcp/kafka/INSTANCE" KAFKA_INSTANCE
          load_param "/global/gcp/kafka/PROJECT_ID" KAFKA_PROJECT_ID
          load_param "/global/gcp/kafka/ZONE" KAFKA_ZONE
          load_secret_to_file "/global/gcp/kafka/SA_KEY" kafka_gcp-sa-key.json
          
          echo "KAFKA_SA_KEY<<EOF" >> $GITHUB_ENV
          cat kafka_gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          if [[ "${{ inputs.project_id }}" == "Tuning-PROD-01" ]]; then
            BRANCH="develop"  # Í∞úÎ∞ú ÌôòÍ≤ΩÏùÑ ÏúÑÌïú Î∏åÎûúÏπò ÏÑ§Ï†ï
            SANITIZED_BRANCH="${BRANCH//\//-}"
            SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
            BRANCH="$SANITIZED_BRANCH"
            echo "BRANCH=$BRANCH" >> $GITHUB_ENV
            echo "ENV=develop" >> $GITHUB_ENV
            load_param "/global/gcp/test/HOST" HOST
            load_param "/global/gcp/test/INSTANCE" INSTANCE
            load_param "/global/gcp/test/PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/test/ZONE" ZONE
            load_secret_to_file "/global/gcp/test/SA_KEY" gcp-sa-key.json
          else
            BRANCH="develop"  # Í∞úÎ∞ú ÌôòÍ≤ΩÏùÑ ÏúÑÌïú Î∏åÎûúÏπò ÏÑ§Ï†ï
            SANITIZED_BRANCH="${BRANCH//\//-}"
            SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
            BRANCH="$SANITIZED_BRANCH"
            echo "BRANCH=$BRANCH" >> $GITHUB_ENV
            echo "ENV=develop" >> $GITHUB_ENV
          fi

      - name: Authenticate to GCP KAFKA
        uses: google-github-actions/auth@v1
        with:
              credentials_json: ${{ env.KAFKA_SA_KEY }}
  
      - name: Setup gcloud CLI_KAFKA
        uses: google-github-actions/setup-gcloud@v1
  
      - name: Boot target instance (start/resume with conditional wait) KAFKA
        run: |
            echo "‚ö° Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë: $KAFKA_INSTANCE (zone: $KAFKA_ZONE)"
            STATUS=$(gcloud compute instances describe "$KAFKA_INSTANCE" --zone="$KAFKA_ZONE" --format='get(status)')
            echo "üîé ÌòÑÏû¨ ÏÉÅÌÉú: $STATUS"
  
            if [[ "$STATUS" == "SUSPENDED" ]]; then
              echo "üîÑ 'resume' Î™ÖÎ†π Ïã§Ìñâ"
              gcloud compute instances resume "$KAFKA_INSTANCE" --zone="$KAFKA_ZONE"
            
             
            elif [[ "$STATUS" == "TERMINATED" ]]; then
              echo "üîÑ 'start' Î™ÖÎ†π Ïã§Ìñâ"
              gcloud compute instances start "$KAFKA_INSTANCE" --zone="$KAFKA_ZONE"
            
            else
              echo "‚úÖ Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ë - ÎåÄÍ∏∞ ÏÉùÎûµ"
            fi

          

      - name: Set environment
        if: ${{ inputs.project_id == 'Tuning-DEV-01' }}
        run: |
          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "ZONE=${{ secrets.GCP_ZONE }}" >> $GITHUB_ENV

          if [[ "$BRANCH" == "main" ]]; then
            echo "‚ö†Ô∏è Ìï¥Îãπ Ïä§ÌÅ¨Î¶ΩÌä∏ÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî PRODÎäî SSH ÏÑúÎ≤ÑÎ°ú Îçî Ïù¥ÏÉÅ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
            exit 1
            echo "ENV=PROD" >> $GITHUB_ENV
            echo "HOST=${{ secrets.PROD_GCP_HOST }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.PROD_GCP_INSTANCE }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.PROD_GCP_PROJECT_ID }}" >> $GITHUB_ENV
          else
            echo "ENV=DEV" >> $GITHUB_ENV
            echo "HOST=${{ secrets.DEV_GCP_HOST }}" >> $GITHUB_ENV
            echo "INSTANCE=${{ secrets.DEV_GCP_INSTANCE }}" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.DEV_GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi

          echo "ROLLBACK=${{ github.event.inputs.rollback }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set deploy message
        run: |
          if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            echo "DEPLOY_MESSAGE=üö® **[${{ env.ENV }} ÌôòÍ≤Ω]** BE Î°§Î∞± ÏôÑÎ£å" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.project_id }}" == "Tuning-PROD-01" ]]; then
            echo "DEPLOY_MESSAGE=üöÄ **[Î∂ÄÌïò ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω]** BE Î∞∞Ìè¨ ÏôÑÎ£å" >> $GITHUB_ENV
          else
            echo "DEPLOY_MESSAGE=üöÄ **[${{ env.ENV }} ÌôòÍ≤Ω]** BE Î∞∞Ìè¨ ÏôÑÎ£å" >> $GITHUB_ENV
          fi

      - name: Authenticate to GCP
        if: github.ref_name == 'main' && github.event.inputs.project_id == 'Tuning-DEV-01' 
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Authenticate to GCP (Stage)
        if: github.ref_name != 'main' && github.event.inputs.project_id == 'Tuning-DEV-01' 
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_SA_KEY }}

      - name: Authenticate to GCP (test)
        if: github.event.inputs.project_id == 'Tuning-PROD-01'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PROD_GCP_SA_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        run: |
          echo "‚ö° Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë: $INSTANCE (zone: $ZONE)"
          STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
          echo "üîé ÌòÑÏû¨ ÏÉÅÌÉú: $STATUS"

          if [[ "$STATUS" == "SUSPENDED" ]]; then
            echo "üîÑ 'resume' Î™ÖÎ†π Ïã§Ìñâ"
            gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
            echo "‚è≥ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌõÑ 30Ï¥à ÎåÄÍ∏∞..."
            sleep 30
          elif [[ "$STATUS" == "TERMINATED" ]]; then
            echo "üîÑ 'start' Î™ÖÎ†π Ïã§Ìñâ"
            gcloud compute instances start "$INSTANCE" --zone="$ZONE"
            echo "‚è≥ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌõÑ 30Ï¥à ÎåÄÍ∏∞..."
            sleep 30
          else
            echo "‚úÖ Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ë - ÎåÄÍ∏∞ ÏÉùÎûµ"
          fi

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/deploy
            chmod +x be_deploy.sh
            if [[ "${{ env.ROLLBACK }}" == "true" ]]; then
              ./be_deploy.sh --rollback
            else
              ./be_deploy.sh
            fi

      - name: Wait for Spring Boot to start
        run: |
          echo "üïí Spring Boot ÏÑúÎ≤Ñ Í∏∞Îèô ÎåÄÍ∏∞ Ï§ë..."
          sleep 30

      - name: Health check with retries
        run: |
          echo "üîç Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏãúÏûë: ÏµúÎåÄ 10Ìöå ÏãúÎèÑÌï©ÎãàÎã§."

          if [[ "${{ env.BRANCH }}" == "main" ]]; then
            CHECK_URL="https://hertz-tuning.com/api/ping"
          else
            CHECK_URL="http://${{ env.HOST }}:8080/api/ping"
          fi

          for i in {1..15}; do
            echo "‚è±Ô∏è ÏãúÎèÑ $i: $CHECK_URL"
            if curl -sf "$CHECK_URL"; then
              echo "‚úÖ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏÑ±Í≥µ üéâ"
              exit 0
            else
              echo "::error::Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏãúÎèÑ $i Ïã§Ìå®"
              sleep 30
            fi
          done

          echo "::error::‚ùå 10Ìöå Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïã§Ìå® - ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅ Í∏∞ÎèôÎêòÏßÄ ÏïäÏùå"
          exit 1
      


      - name: Send success notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"${{ env.DEPLOY_MESSAGE }}\\n> Branch: \`${{ env.BRANCH }}\`\\n> Commit: ${{ env.COMMIT_HASH }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send failure notification
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"‚ùå **[${{ env.ENV }} ÌôòÍ≤Ω]** BE Î∞∞Ìè¨ Ïã§Ìå®\\n> Branch: \`${{ env.BRANCH }}\`\\n> Commit: ${{ env.COMMIT_HASH }}\\n> [ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î°úÍ∑∏ Î≥¥Í∏∞]($WORKFLOW_URL)\"}" \
               ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}
