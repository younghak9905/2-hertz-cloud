apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tuning-alb-ingress
  namespace: hertz-tuning-dev
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "10"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-2:969400486509:certificate/0923e90f-18b8-4f6c-b33f-878e9d00cfbf
    #alb.ingress.kubernetes.io/target-group-attributes: idle_timeout.timeout_seconds=3600
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          # 1) Next.js 정적 자산
          - path: /_next
            pathType: Prefix
            backend:
              service:
                name: nextjs-fe-svc
                port:
                  number: 80

          # 2) REST API
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: springboot-be-svc
                port:
                  number: 80

          # 3) WebSocket
          - path: /socket.io
            pathType: Prefix
            backend:
              service:
                name: springboot-be-svc
                port:
                  number: 9100

            #4) ArgoCD
          #        - path: /argocd
          #          pathType: Prefix
          #          backend:
          #            service:
          #              name: tuning-argocd-svc
          #              port:
          #                number: 80

          # 4) 나머지 모든 요청 → Next.js 라우팅
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nextjs-fe-svc
                port:
                  number: 80
